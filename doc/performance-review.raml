#%RAML 0.8
title: performance review
version: v1
mediaType:  application/json

schemas:
  - ErrorMessage: |
      {
        "type": "object",
        "required": ["message"],
        "properties": {
          "message": { "type": "string" }
        }
      }
  - UsersResponse: |
      {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "username": { "type": "string" },
            "nickname": { "type": "string" },
            "email": { "type": "string" },
            "img": { "type": "string" },
            "role": { 
              "type": "array",
              "items": {
                "type": "enum"
              }
            },
            "department": { "type": "string" },
            "type": { "enum": ["SYSTEM_ADMIN", "NORMAL"] },
            "grade": { "type": "string" }
          }
        }
      }
  - UserParam: |
      {
        "type": "object",
        "properties": {
          "username": { "type": "string" },
          "nickname": { "type": "string" },
          "email": { "type": "string" },
          "img": { "type": "string" },
          "roles": { "type": "string" },
          "department": { "type": "string" },
          "password": { "type": "string" },
          "type": { "enum": ["SYSTEM_ADMIN", "NORMAL"] },
          "grade": { "type": "string" }
        },
        "required": ["username", "password", "nickname", "email", "type"]
      }
  - PutUserParam: |
      {
        "type": "object",
        "properties": {
          "username": { "type": "string" },
          "nickname": { "type": "string" },
          "email": { "type": "string" },
          "img": { "type": "string" },
          "roles": { "type": "string" },
          "department": { "type": "string" },
          "type": { "enum": ["SYSTEM_ADMIN", "NORMAL"] },
          "grade": { "type": "string" }
        },
        "required": ["username", "nickname", "email", "type"]
      }
/authentication:
  post:
    description: Login
    body:
      schema: |
        {
          "type": "object",
          "properties": {
            "username": { "type": "string" },
            "password": { "type": "string" }
          },
          "required": ["username", "password"]
        }
      example: |
        {
          "username": "scxu",
          "password": "password"
        }
    responses:
      400:
        body:
          schema: ErrorMessage
      201:
        body:
          example: !include examples/response_200_get_user.json
          schema: !include schemas/response_200_get_user.schema.json
  delete:
    description: Logout
    responses:
      204:
  get:
    description: Get current user
    responses:
      401:
      200:
        body:
          example: !include examples/response_200_get_user.json
          schema: !include schemas/response_200_get_user.schema.json
/users:
  get:
    description: List all users
    queryParameters:
      q:
        type: string
        description: Get result by search, can match username or nickname
      limit:
        type: integer
        description: Limit response user count
    responses:
      200:
        body:
          schema: UsersResponse
          example: !include examples/response_200_get_users.json

  post:
    description: As system admin, import user
    body:
      schema: UserParam
      example: |
        {
          "username": "jksun",
          "email": "jksun@thoughtworks.com",
          "img": "imgs/img.gif",
          "nickname": "Jiankang Sun",
          "id": "12312",
          "role": "PM | DEV",
          "type": "NORMAL",
          "department": "Professional Services",
          "home_office": "Xi'an",
          "grade": "Con",
          "password": "123"
        }
    responses:
      201:
      400:
        body:
          example: !include examples/response_400_post_users.json
          schema: !include schemas/response_400.schema.json
  /{username}:
    get:
      responses:
        200:
          body:
            example: !include examples/response_200_get_user.json
            schema: !include schemas/response_200_get_user.schema.json
        404:
    put:
      description: As system admin, update user info, can not update password, user id, user name, email
      body:
          application/json:
            schema: PutUserParam
            example: |
              {
                "nickname": "Jiankang Sun",
                "role": "DEV",
                "department": "Professional Services",
                "type": "NORMAL",
                "home_office": "xx",
                "username": "pzzheng",
                "email": "email@email.com",
                "img": "imgs/img.gif"
              }
      responses:
        204:
        400:
          body:
            application/json:
              example: !include examples/response_400_post_users.json
              schema: !include schemas/response_400.schema.json
    /password:
      put:
        description: |
          Update password
        body:
          application/json:
            example: |
              {
                "old_password": "xxx",
                "new_password": "xxx"
              }
        responses:
          204:
          400:
            body:
              example: !include examples/response_400_post_users.json
              schema: !include schemas/response_400.schema.json
    /members:
        get:
            description: list all memebers of project lead
            responses:
                200:
                    body:
                        application/json:
                            example: !include examples/response_200_get_coachee_assignment.json
    /sponsees:
        get:
            description: list all sponsees of sponsor
            responses:
                200:
                    body:
                        application/json:
                            example: !include examples/response_200_get_coachee_assignment.json
    /invitations:
        get:
            description: list all feedback invitations for one person
            queryParameters:
                 page:
                    type: integer
                    default: 1
                 perPage:
                    type: integer
                    default: 10
                 inviter:
                    type: string
            responses:
                200:
                    body:
                        application/json:
                            example: !include examples/response_200_get_witness_invitations.json
    /evidences:
         get:
            description: list all submitted evidences of user
            queryParameters:
                behaviors:
                    type: string
                    description: the ids of behaviors
                startDate:
                    type: string
                    description: the start date of the evidence(inclusive)
                endDate:
                    type: string
                    description: the end date of the evidence(inclusive). The date must be Datetime type, or the endDate may be exclusive
            responses:
              200:
                body:
                  application/json:
                    example: !include examples/response_200_get_evidences.json
/users/{username}/programs:
  get:
    description: users can get all the programs of himself. At present, all users can join in any program, which means here it will show all the programs in this system. The programs should be order by Desc, which means the latest program is in front.
    body:
      application/json:
        example: !include examples/response_200_get_programs.json
  /{programId}:
    /assignments:
        post:
          description: add new sponsor/sponsee or project lead/member assignment
          body:
            schema: !include schemas/request_post_assignments.schema.json
            example: !include examples/request_post_assignments.json
          responses:
            201:
            400:
        get:
            description: Get all sponsor and projects info of this user on the program
            responses:
              200:
                body:
                  application/json:
                    example: !include examples/response_200_get_assignments.json
        /{aid}:
            delete:
              description: staff can delete an assignment
              responses:
                204:
                404:
    /self_reviews:
      post:
        description: as a user, can create a self review in a program.
        body:
          application/json:
            schema: !include schemas/request_post_self_review.schema.json
            example: |
              {
                "behaviors": ["id1", "id2"]
              }
        responses:
          201:
          400:
          403:
            description: can only create self review for yourself
      get:
        description: list all self reviews.
        responses:
          200:
            body:
              application/json:
                example: !include examples/response_200_get_self_reviews.json
      /{selfreviewId}:
        get:
          description: get one self review, include evidence draft if current user is the author
          responses:
            200:
                body:
                  application/json:
                    example: !include examples/response_200_get_self_review.json
            404:
        /feedbacks:
            post:
              description: Create new feedback, only coach and observers can do this
              body:
                schema: |
                  {
                    "properties": {
                      "comment": { "type": "string" },
                      "feedback_type": { "type": "string" }
                    },
                    "required": ["feedback_type"]
                  }
                example: |
                  {
                    "feedback_type": "comment | endorse",
                    "comment": "bla"
                  }
            /{feedbackId}:
                delete:
                    description: remove a feedback, only by author
                    responses:
                      204:
                      404:
                      403:
        /evidences:
          post:
            description: create new evidence
            body:
              application/json:
                schema: |
                  {
                    "type": "object",
                    "properties": {
                      "content": { "type": "string" },
                      "observers": {
                        "type": "array",
                        "items": { "type": "string" }
                      },
                      "behavior": {
                        "type": "string",
                        "description": "behavior id"
                      }
                    }
                  }
                example: |
                  {
                    "content": "xxxx",
                    "observers": ["pzzheng", "scxu", "jksun"],
                    "behavior": "123123123"
                  }
            responses:
              201:
              404:
          /{evidenceId}:
            get:
              description: show evidences for this user in this program
              responses:
                200:
                  body:
                    application/json:
                      example: !include examples/response_200_get_evidence.json
            put:
                description: update evidence
                body:
                  schema: |
                    {
                      "properties": {
                        "content": { "type": "string" },
                        "observers": { "type": "array", "items": { "type": "string" } }
                      }
                    }
                  example: |
                   {
                      "content": "new content"
                   }
                responses:
                  200:
                  409:
                    description: exception for already submitted evidence
                  403:
                  400:
            delete:
                description: delete an evidence
                responses:
                  204:
                  403:
            /submit:
              put:
                description: Make evidence submitted
                responses:
                  204:
                  409:
                    description: exception for alreay submitted evidence

/categories:
  post:
    description: as admin, can create new category
    body:
      application/json:
        schema: |
          {
            "type": "object",
            "properties": {
              "name": { "type": "string" }
            },
            "required": ["name"]
          }
        example: |
          {
            "name": "Core Competence"
          }
    responses:
      201:
      400:
  get:
    description: as admin, can get all categories
    responses:
        200:
            body:
                application/json:
                    example: |
                        [{
                            "id": "xxx",
                            "name": "xxx"
                        }]
  /{categoryId}:
    get:
      description: as admin, can get one category
      responses:
        200:
          body:
            application/json:
              example: |
                {
                  "id": "xxx",
                  "name": "xxx"
                }
        404:
    put:
      body:
        application/json:
          example: |
            {
              "name": "Core Competence",
              "required": [
                "name"
              ]
            }
      responses:
        200:
        400:
        404:
    delete:
      responses:
        404:
        204:

/competences:
  post:
    description: as admin, can create new competence
    body:
      application/json:
        schema: !include schemas/request_post_competence.schema.json
        example: !include examples/request_post_competence.json
    responses:
      201:
      400:
  get:
    description: as admin, can list competences
    queryParameters: 
      role:
        type: string
        description: list competences for some role
    responses:
      200:
        body:
          application/json:
            example: !include examples/response_200_get_competences.json
              
  /{competenceId}:
    put:
      body:
        application/json:
          schema: !include schemas/request_post_competence.schema.json
          example: !include examples/request_post_competence.json
      responses:
        200:
        404:
    delete:
      responses:
        204:
        404:
/programs:
  post:
    description: as admin, can create new program
    body:
      application/json:
        schema: !include schemas/request_post_program.schema.json
        example: !include examples/request_post_program.json
    responses:
      201:
      400:
  get:
    description: as admin, can list all programs
    responses:
      200:
        body:
          application/json:
            example: !include examples/response_200_get_programs.json
  /{programId}:
    get:
      description: as admin, can get program info
      responses:
        200:
          body:
            application/json:
              example: !include examples/response_200_get_program.json
    put:
      description: update program info
      body:
        application/json:
          schema: !include schemas/request_post_program.schema.json
          example: !include examples/request_post_program.json
      responses:
        200:
        400:
    delete:
      description: remove program
      responses:
        204:
        404:
    /published:
      put:
        description: publish program
        responses:
          204:
          404:
          409: