#%RAML 0.8
title: performance review
version: v2
mediaType:  application/json

schemas:
  - ErrorMessage: |
      {
        "type": "object",
        "required": ["message"],
        "properties": {
          "message": { "type": "string" }
        }
      }
  - UsersResponse: |
      {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "username": { "type": "string" },
            "nickname": { "type": "string" },
            "email": { "type": "string" },
            "img": { "type": "string" },
            "role": { "type": "string" },
            "department": { "type": "string" },
            "type": { "enum": ["SYSTEM_ADMIN", "NORMAL"] },
            "grade": { "type": "string" }
          }
        }
      }
  - UserParam: |
      {
        "type": "object",
        "properties": {
          "username": { "type": "string" },
          "nickname": { "type": "string" },
          "email": { "type": "string" },
          "img": { "type": "string" },
          "role": { "type": "string" },
          "department": { "type": "string" },
          "password": { "type": "string" },
          "type": { "enum": ["SYSTEM_ADMIN", "NORMAL"] },
          "grade": { "type": "string" }
        },
        "required": ["username", "password", "nickname", "email", "type"]
      }
  - PutUserParam: |
      {
        "type": "object",
        "properties": {
          "username": { "type": "string" },
          "nickname": { "type": "string" },
          "email": { "type": "string" },
          "img": { "type": "string" },
          "role": { "type": "string" },
          "department": { "type": "string" },
          "type": { "enum": ["SYSTEM_ADMIN", "NORMAL"] },
          "grade": { "type": "string" }
        },
        "required": ["username", "nickname", "email", "type"]
      }
/authentication:
  post:
    description: Login
    body:
      schema: |
        {
          "type": "object",
          "properties": {
            "username": { "type": "string" },
            "password": { "type": "string" }
          },
          "required": ["username", "password"]
        }
      example: |
        {
          "username": "scxu",
          "password": "password"
        }
    responses:
      400:
        body:
          schema: ErrorMessage
      201:
        body:
          example: !include examples/response_200_get_user.json
          schema: !include schemas/response_200_get_user.schema.json
  delete:
    description: Logout
    responses:
      204:
  get:
    description: Get current user
    responses:
      401:
      200:
        body:
          example: !include examples/response_200_get_user.json
          schema: !include schemas/response_200_get_user.schema.json
/users:
  get:
    description: List all users
    queryParameters:
      q:
        type: string
        description: Get result by search, can match username or nickname
      limit:
        type: integer
        description: Limit response user count
    responses:
      200:
        body:
          schema: UsersResponse
          example: !include examples/response_200_get_users.json

  post:
    description: As system admin, import user
    body:
      schema: UserParam
      example: |
        {
          "username": "jksun",
          "email": "jksun@thoughtworks.com",
          "img": "imgs/img.gif",
          "nickname": "Jiankang Sun",
          "id": "12312",
          "role": "DEV",
          "type": "NORMAL",
          "department": "Professional Services",
          "home_office": "Xi'an",
          "grade": "Con",
          "password": "123"
        }
    responses:
      201:
      400:
        body:
          example: !include examples/response_400_post_users.json
          schema: !include schemas/response_400.schema.json
  /{username}:
    get:
      responses:
        200:
          body:
            example: !include examples/response_200_get_user.json
            schema: !include schemas/response_200_get_user.schema.json
        404:
    put:
      description: As system admin, update user info, can not update password, user id, user name, email
      body:
          application/json:
            schema: PutUserParam
            example: |
              {
                "nickname": "Jiankang Sun",
                "role": "DEV",
                "department": "Professional Services",
                "type": "NORMAL",
                "home_office": "xx",
                "username": "pzzheng",
                "email": "email@email.com",
                "img": "imgs/img.gif"
              }
      responses:
        204:
        400:
          body:
            application/json:
              example: !include examples/response_400_post_users.json
              schema: !include schemas/response_400.schema.json
    /password:
      put:
        description: |
          Update password
        body:
          application/json:
            example: |
              {
                "old_password": "xxx",
                "new_password": "xxx"
              }
        responses:
          204:
          400:
            body:
              example: !include examples/response_400_post_users.json
              schema: !include schemas/response_400.schema.json
    /projects:
      get:
        description: list all projects
        responses:
          200:
            body:
              application/json:
                example: |
                  {
                    "count": 10,
                    "first": "xx",
                    "last": "",
                    "prev": "",
                    "next": "",
                    "items": [
                      {
                        "id": "xxx",
                        "name": "",
                        "description": "",
                        "status": "PUBLISHED",
                        "links": {
                            "self": "programs/1"
                        }
                      }
                    ]
                  }
    /assignments:
        get:
            description: list all program assignment for one person
            responses:
                200:
                  body:
                    application/json:
                      example: !include examples/response_200_get_assignment.json
    /members:
        get:
            description: list all memebers of project lead
            responses:
                200:
                    body:
                        application/json:
                            example: !include examples/response_200_get_coachee_assignment.json
    /sponsees:
        get:
            description: list all sponsees of sponsor
            responses:
                200:
                    body:
                        application/json:
                            example: !include examples/response_200_get_coachee_assignment.json
    /invitations:
        get:
            description: list all feedback invitations for one person
            queryParameters:
                 page:
                    type: integer
                    default: 1
                 perPage:
                    type: integer
                    default: 10
                 inviter:
                    type: string
            responses:
                200:
                    body:
                        application/json:
                            example: !include examples/response_200_get_witness_invitations.json
    /evidences:
         get:
            description: list all submitted evidences of user
            queryParameters:
                behaviors:
                    type: string
                    description: the ids of behaviors
                startDate:
                    type: string
                    description: the start date of the evidence(inclusive)
                endDate:
                    type: string
                    description: the end date of the evidence(inclusive). The date must be Datetime type, or the endDate may be exclusive
            responses:
              200:
                body:
                  application/json:
                    example: !include examples/response_200_get_evidences.json
    /programs/pid:
      /self_reviews:
        post:
          description: create new self reflection
          body:
            application/json:
              schema: |
                {
                  "type": "object",
                  "properties": {
                    "behaviors": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "description": "behavior id"
                      }
                    }
                  }
                }
              example: |
                {
                  "behaviors": ["id1", "id2"]
                }
          responses:
            201:
            400:
        get:
          description: list all self reflections
          queryParameters:
              isComplete:
                  type: string
                  description: if there is at least one evidence for the self review, the self review is complete
          responses:
            200:
              body:
                application/json:
                  example: !include examples/response_200_get_self_reflections.json
        /{selfReviewId}:
          get:
            description: get one self reflection, include evidence draft if current user is the author
            responses:
              200:
                  body:
                    application/json:
                      example: !include examples/response_200_get_self_reflection.json
              404:
          /feedbacks:
              post:
                description: Create new feedback, only coach and observers can do this
                body:
                  schema: |
                    {
                      "properties": {
                        "comment": { "type": "string" },
                        "feedback_type": { "type": "string" }
                      },
                      "required": ["feedback_type"]
                    }
                  example: |
                    {
                      "feedback_type": "comment | endorse",
                      "comment": "bla"
                    }
              /{feedbackId}:
                  delete:
                      description: remove a feedback, only by author
                      responses:
                        204:
                        404:
                        403:
          /evidences:
            post:
              description: create new evidence
              body:
                application/json:
                  schema: |
                    {
                      "type": "object",
                      "properties": {
                        "content": { "type": "string" },
                        "observers": {
                          "type": "array",
                          "items": { "type": "string" }
                        },
                        "behavior": {
                          "type": "string",
                          "description": "behavior id"
                        }
                      }
                    }
                  example: |
                    {
                      "content": "xxxx",
                      "observers": ["pzzheng", "scxu", "jksun"],
                      "behavior": "123123123"
                    }
              responses:
                201:
                404:
            /{evidenceId}:
              get:
                description: show evidences for this user in this program
                responses:
                  200:
                    body:
                      application/json:
                        example: !include examples/response_200_get_evidence.json
              put:
                  description: update evidence
                  body:
                    schema: |
                      {
                        "properties": {
                          "content": { "type": "string" },
                          "observers": { "type": "array", "items": { "type": "string" } }
                        }
                      }
                    example: |
                     {
                        "content": "new content"
                     }
                  responses:
                    200:
                    409:
                      description: exception for already submitted evidence
                    403:
                    400:
              delete:
                  description: delete an evidence
                  responses:
                    204:
                    403:
              /submit:
                put:
                  description: Make evidence submitted
                  responses:
                    204:
                    409:
                      description: exception for alreay submitted evidence

/categories:
  post:
    description: create new category
    body:
      application/json:
        schema: |
          {
            "type": "object",
            "properties": {
              "name": { "type": "string" }
            },
            "required": ["name"]
          }
        example: |
          {
            "name": "Core Competence"
          }
    responses:
      201:
      400:
  get:
    description: get all categories
    responses:
        200:
            body:
                application/json:
                    example: |
                        [{
                            "id": "xxx",
                            "name": "xxx"
                        }]
  /{categoryId}:
    get:
      description: get one category
      responses:
        200:
          body:
            application/json:
              example: |
                {
                  "id": "xxx",
                  "name": "xxx"
                }
        404:
    put:
      body:
        application/json:
          example: |
            {
              "name": "Core Competence",
              "required": [
                "name"
              ]
            }
      responses:
        200:
        400:
        404:
    delete:
      responses:
        404:
        204:

/competences:
  post:
    description: create new competence
    body:
      application/json:
        schema: |
          {
            "type": "object",
            "properties": {
              "name": { "type": "string" },
              "description": { "type": "string" },
              "category": {
                "type": "string",
                "description": "Id of category"
              },
              "behaviors": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "description": { "type": "string" },
                    "hint": { "type": "string" }
                  },
                  "required": ["description", "hint"]
                },
                "minItems": 1
              }
            },
            "required": ["name", "description", "category", "behaviors"]
          }
        example: |
          {
            "name": "Self Confidence",
            "description": "A ....",
            "category": "category_id",
            "behaviors": [
              {
                "hint": "hint",
                "description": "desc"
              }
            ]
          }
    responses:
      201:
      400:
  get:
    description: list competences
    responses:
      200:
        body:
          application/json:
            example: |
              [
                {
                  "id": "xxx",
                  "name": "Self Confidence",
                  "description": "A ...",
                  "category": {
                    "id": "xxx",
                    "name": "xxx"
                  },
                  "behaviors": [
                    {
                      "id": "xxx",
                      "description": "xxx",
                      "hint": "xxx"
                    }
                  ]
                },
                {
                  "id": "xxx",
                  "name": "Self Confidence",
                  "description": "A ...",
                  "category": {
                    "id": "xxx",
                    "name": "xxx"
                  },
                  "behaviors": [
                    {
                      "id": "xxx",
                      "description": "xxx",
                      "hint": "xxx"
                    }
                  ]
                }
              ]
  /{competenceId}:
    put:
      body:
        application/json:
          schema: |
            {
              "type": "object",
              "properties": {
                "name": { "type": "string" },
                "description": { "type": "string" },
                "category": {
                  "type": "string",
                  "description": "Id of category"
                },
                "behaviors": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "description": { "type": "string" },
                      "hint": { "type": "string" },
                      "id": { "type": "string" }
                    },
                    "required": ["description", "hint"]
                  },
                  "minItems": 1
                }
              },
              "required": ["name", "description", "category", "behaviors"]
            }
          example: |
            {
              "name": "Self Confidence",
              "description": "A ....",
              "category": "category_id",
              "behaviors": [{
                "id": "id",
                "hint": "hint",
                "description": "desc"
              }]
            }
      responses:
        200:
        404:
    delete:
      responses:
        204:
        404:
/evidences:
    get:
        description: admin can get all evidences by query parameter (at most 100 items once)
        queryParameters:
            startDate:
                type: number
                description: the start date (inclusive)
            endDate:
                type: number
                description: the end date (inclusive). The date must be Datetime type, or the endDate may be exclusive
            owner:
                type: string
                description: the owner name of the evidences
            program:
                type: string
                description: the program id of the evidences
            role:
                type: string
                description: the role of the evidence owner, eg. COACHEE
        responses:
          200:
            body:
              example: !include examples/response_200_get_evidences.json
/programs:
  post:
    description: create new program
    body:
      application/json:
        schema: |
          {
            "type": "object",
            "properites": {
              "name": { "type": "string" },
              "description": { "type": "string" }
            },
            "required": ["name", "description"]
          }
        example: |
          {
            "name": "xxx",
            "description": "xxx"
          }
    responses:
      201:
      400:
  get:
    description: list all programs
    responses:
      200:
        body:
          application/json:
            example: |
              {
                "count": 10,
                "first": "xx",
                "last": "",
                "prev": "",
                "next": "",
                "items": [
                  {
                    "id": "xxx",
                    "name": "",
                    "description": "",
                    "status": "PUBLISHED",
                    "links": {
                        "self": "programs/1"
                    }
                  }
                ]
              }
  /{programId}:
    get:
      description: get program info
      responses:
        200:
          body:
            application/json:
              example: |
                {
                  "id": "xxx",
                  "name": "xx",
                  "description": "xx",
                  "status": "PUBLISHED",
                  "competences": [
                    {
                      "id": "xx",
                      "name": "xxx",
                      "description": "xx",
                      "category": {
                        "id": "xx",
                        "name": "xxx"
                      },
                      "behaviors": [

                      ]
                    }
                  ],
                  "links": {
                      "self": "programs/1"
                  }
                }
    put:
      description: update program info
      body:
        application/json:
          example: |
            {
              "name": "xxx",
              "description": "xxx"
            }
      responses:
        200:
        400:
    delete:
      description: remove unpublished program
      responses:
        204:
        404:
        409:
    /published:
      put:
        description: publish program
        responses:
          204:
          404:
          409:
/projects:
  post:
    description: create new project
    body:
      application/json:
        schema: |
          {
            "type": "object",
            "properites": {
              "name": { "type": "string" },
              "description": { "type": "string" }
            },
            "required": ["name", "description"]
          }
        example: |
          {
            "name": "xxx",
            "description": "xxx"
          }
    responses:
      201:
      400:
  get:
    description: list all projects
    responses:
      200:
        body:
          application/json:
            example: |
              {
                "count": 10,
                "first": "xx",
                "last": "",
                "prev": "",
                "next": "",
                "items": [
                  {
                    "id": "xxx",
                    "name": "",
                    "description": "",
                    "status": "PUBLISHED",
                    "links": {
                        "self": "programs/1"
                    }
                  }
                ]
              }
  /{projectid}:
    get:
      description: get project info
      responses:
        200:
          body:
            application/json:
              example: |
                {
                  "id": "xxx",
                  "name": "xx",
                  "description": "xx",
                  "status": "PUBLISHED",
                  "competences": [
                    {
                      "id": "xx",
                      "name": "xxx",
                      "description": "xx",
                      "category": {
                        "id": "xx",
                        "name": "xxx"
                      },
                      "behaviors": [

                      ]
                    }
                  ],
                  "links": {
                      "self": "programs/1"
                  }
                }
    delete:
      description: remove unpublished program
      responses:
        204:
        404:
        409:
    /published:
      put:
        description: publish program
        responses:
          204:
          404:
          409:  
    /assignments:
      get:
          description: Get all assignment info of this project
          responses:
            200:
              body:
                application/json:
                  example: !include examples/response_200_get_assignment.json
/assignments:
      post:
        description: as system admin add new sponsor/sponsee or project lead/member assignment
        body:
          schema: |
            {
              "type": "object",
              "properties": {
                "assignments": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "oneOf": [
                      {
                        "type": "object",
                        "properties": {
                          "username": { "type": "string" },
                          "role": { "enum": ["COACH"] }
                        },
                        "required": ["username", "role"],
                        "additionalProperties": false
                      },
                      {
                        "type": "object",
                        "properties": {
                          "username": {
                            "type": "string"
                          },
                          "role": {
                            "enum": ["COACHEE"]
                          },
                          "coach": {
                            "type": "string"
                          }
                        },
                        "required": ["username", "role", "coach"],
                        "additionalProperties": false
                      }
                    ]
                  }
                }
              }
            }
          example: |
            {
              "assignments": [
                {
                  "username": "xxx",
                  "role": "COACHEE",
                  "coach": "xxx"
                },
                {
                  "username": "xxx",
                  "role": "COACH"
                }
              ]
            }
        responses:
          201:
          400:
      get:
          description: Get all assignment info
          responses:
            200:
              body:
                application/json:
                  example: !include examples/response_200_get_assignment.json
      /{aid}:
          delete:
            description: As system admin, delete assignment
            responses:
              204:
              404:
